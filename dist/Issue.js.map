{"version":3,"sources":["../server/Issue.js"],"names":["validIssueStatus","New","Open","Assigned","Fixed","Verified","Closed","issueFieldType","status","owner","effort","created","completionDate","title","cleanupIssue","issue","cleanedUpIssue","Object","keys","forEach","field","convertIssue","Date","validateIssue","errors","push","length","join"],"mappings":";;;;;;AAAA,IAAMA,gBAAgB,GAAG;AACrBC,EAAAA,GAAG,EAAE,IADgB;AAErBC,EAAAA,IAAI,EAAE,IAFe;AAGrBC,EAAAA,QAAQ,EAAE,IAHW;AAIrBC,EAAAA,KAAK,EAAE,IAJc;AAKrBC,EAAAA,QAAQ,EAAE,IALW;AAMrBC,EAAAA,MAAM,EAAE;AANa,CAAzB;AASA,IAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,UADW;AAEnBC,EAAAA,KAAK,EAAE,UAFY;AAGnBC,EAAAA,MAAM,EAAE,UAHW;AAInBC,EAAAA,OAAO,EAAE,UAJU;AAKnBC,EAAAA,cAAc,EAAE,UALG;AAMnBC,EAAAA,KAAK,EAAE;AANY,CAAvB;;AASA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AACzB,MAAMC,cAAc,GAAG,EAAvB;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,OAAnB,CAA2B,UAAAC,KAAK,EAAI;AAChC,QAAIb,cAAc,CAACa,KAAD,CAAlB,EAA2BJ,cAAc,CAACI,KAAD,CAAd,GAAwBL,KAAK,CAACK,KAAD,CAA7B;AAC9B,GAFD;AAGA,SAAOJ,cAAP;AACH;;AAED,SAASK,YAAT,CAAsBN,KAAtB,EAA6B;AACzB,MAAIA,KAAK,CAACJ,OAAV,EAAmBI,KAAK,CAACJ,OAAN,GAAgB,IAAIW,IAAJ,CAASP,KAAK,CAACJ,OAAf,CAAhB;AACnB,MAAII,KAAK,CAACH,cAAV,EAA0BG,KAAK,CAACH,cAAN,GAAuB,IAAIU,IAAJ,CAASP,KAAK,CAACH,cAAf,CAAvB;AAC1B,SAAOE,YAAY,CAACC,KAAD,CAAnB;AACH;;AAED,SAASQ,aAAT,CAAuBR,KAAvB,EAA8B;AAC1B,MAAMS,MAAM,GAAG,EAAf;AACAP,EAAAA,MAAM,CAACC,IAAP,CAAYX,cAAZ,EAA4BY,OAA5B,CAAoC,UAAAC,KAAK,EAAI;AACzC,QAAIb,cAAc,CAACa,KAAD,CAAd,KAA0B,UAA1B,IAAwC,CAACL,KAAK,CAACK,KAAD,CAAlD,EAA2D;AACvDI,MAAAA,MAAM,CAACC,IAAP,oCAAwCL,KAAxC;AACH;AACJ,GAJD;;AAMA,MAAI,CAACpB,gBAAgB,CAACe,KAAK,CAACP,MAAP,CAArB,EAAqC;AACjCgB,IAAAA,MAAM,CAACC,IAAP,WAAeV,KAAK,CAACP,MAArB;AACH;;AAED,SAAQgB,MAAM,CAACE,MAAP,GAAgBF,MAAM,CAACG,IAAP,CAAY,IAAZ,CAAhB,GAAoC,IAA5C;AACH;;eAEc;AACXJ,EAAAA,aAAa,EAAbA,aADW;AAEXT,EAAAA,YAAY,EAAZA,YAFW;AAGXO,EAAAA,YAAY,EAAZA;AAHW,C","sourcesContent":["const validIssueStatus = {\n    New: true,\n    Open: true,\n    Assigned: true,\n    Fixed: true,\n    Verified: true,\n    Closed: true,\n};\n\nconst issueFieldType = {\n    status: 'required',\n    owner: 'required',\n    effort: 'optional',\n    created: 'required',\n    completionDate: 'optional',\n    title: 'required',\n};\n\nfunction cleanupIssue(issue) {\n    const cleanedUpIssue = {};\n    Object.keys(issue).forEach(field => {\n        if (issueFieldType[field]) cleanedUpIssue[field] = issue[field];\n    });\n    return cleanedUpIssue;\n}\n\nfunction convertIssue(issue) {\n    if (issue.created) issue.created = new Date(issue.created);\n    if (issue.completionDate) issue.completionDate = new Date(issue.completionDate);\n    return cleanupIssue(issue);\n}\n\nfunction validateIssue(issue) {\n    const errors = [];\n    Object.keys(issueFieldType).forEach(field => {\n        if (issueFieldType[field] === 'required' && !issue[field]) {\n            errors.push(`Missing mandatory field: ${field}`);\n        }\n    });\n\n    if (!validIssueStatus[issue.status]) {\n        errors.push(`${issue.status} is not a valid status.`);\n    }\n\n    return (errors.length ? errors.join('; ') : null);\n}\n\nexport default {\n    validateIssue,\n    cleanupIssue,\n    convertIssue,\n};"],"file":"Issue.js"}