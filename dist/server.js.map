{"version":3,"sources":["../server/server.js"],"names":["sourceMapSupport","install","express","require","bodyParser","app","use","json","validIssueStatus","New","Open","Assigned","Fixed","Verified","Closed","issueFieldType","status","owner","effort","created","completionDate","title","validateIssue","issue","field","type","post","req","res","newIssue","body","Date","err","message","db","collection","insertOne","then","result","find","_id","insertedId","limit","next","error","console","log","get","filter","toArray","issues","metadata","total_count","length","_metadata","records","MongoClient","connect","client","listen"],"mappings":"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","sourcesContent":["import sourceMapSupport from 'source-map-support'\n// import queryString from 'query-string'\nimport { MongoClient } from 'mongodb';\n\n\nsourceMapSupport.install()\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\n// an instance of express\nconst app = express();\n\n// mounting other middlewares into our server.js\napp.use(express.static('static'));\n\n// connection to the database\n\n\n\n\n// hot module replacement using HMR  express middlewares\n// if (process.env.NODE_ENV !== 'production') {\n//     const webpack = require('webpack');\n//     const webpackDevMiddleware = require('webpack-dev-middleware');\n//     const webpackHotMiddleware = require('webpack-hot-middleware');\n\n//     // getting the webpack config files\n//     const config = require('./webpack.config');\n\n//     config.entry.app.push('webpack-hot-middleware/client','webpack/hot/only-dev-server');\n//     config.plugins.push(new webpack.HotModuleReplacementPlugin());\n//     const bundler = webpack(config);\n//     // Mounting the HMR middlewares using app.use() middleware mounter\n//     app.use(webpackDevMiddleware(bundler, { noInfo: true }));\n//     app.use(webpackHotMiddleware(bundler, { log: console.log }));\n//   }\n\n\n\n\n// bodyparser thingy\n\napp.use(bodyParser.json());\n\n// not validated post pointing to uri\n// app.post('/api/issues', (req, res) => {\n//     const newIssue = req.body;\n//     newIssue.id = issues.length + 1;\n//     newIssue.created = new Date();\n//     if (!newIssue.status)\n//         newIssue.status = 'New';\n//     issues.push(newIssue);\n//     res.json(validIssueStatus);\n// });\n\n// mock data to test the apis\n// const issues = [\n//     {\n//         id: 1, status: 'Open', owner: 'Ravan',\n//         created: new Date('2016-08-15'), effort: 5, completionDate: undefined,\n//         title: 'Error in console when clicking Add',\n//     },\n//     {\n//         id: 2, status: 'Assigned', owner: 'Eddie',\n//         created: new Date('2016-08-16'), effort: 14,\n//         completionDate: new Date('2016-08-30'),\n//         title: 'Missing bottom border on panel',\n//     },\n// ];\n\nconst validIssueStatus = {\n    New: true,\n    Open: true,\n    Assigned: true,\n    Fixed: true,\n    Verified: true,\n    Closed: true,\n};\nconst issueFieldType = {\n    status: 'required',\n    owner: 'required',\n    effort: 'optional',\n    created: 'required',\n    completionDate: 'optional',\n    title: 'required',\n};\n// this function validates the issue object created by the user\nfunction validateIssue(issue) {\n    for (const field in issueFieldType) {\n        const type = issueFieldType[field];\n        if (!type) {\n            delete issue[field];\n        } else if (type === 'required' && !issue[field]) {\n            return `${field} is required.`;\n        }\n    }\n    if (!validIssueStatus[issue.status])\n        return `${issue.status} is not a valid status.`;\n    return null;\n}\n\napp.post('/api/issues', (req, res) => {\n    const newIssue = req.body;\n    newIssue.created = new Date();\n    if (!newIssue.status)\n        newIssue.status = 'New';\n    const err = validateIssue(newIssue)\n    if (err) {\n        res.status(422).json({ message: `Invalid request: ${err}` });\n        return;\n    }\n    db.collection('issues').insertOne(newIssue).then(result =>\n        db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\n    ).then(newIssue => {\n        res.json(newIssue);\n    }).catch(error => {\n        console.log(error);\n        res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\napp.get('/api/issues', (req, res) => {\n    const filter = {};\n    if (req.body.status) filter.status = req.body.status;\n    db.collection('issues').find().toArray().then(issues => {\n        const metadata = { total_count: issues.length };\n        res.json({ _metadata: metadata, records: issues })\n    }).catch(error => {\n        console.log(error);\n        res.status(500).json({ message: `Internal Server Error: ${error}` });\n    });\n});\n\nlet db = null;\n\n// Initialize connection once\nMongoClient.connect(\"mongodb://localhost:27017/test\", (err, client) => {\n    if (err) throw err;\n\n    db = client.db('test');\n\n    // Start the application after the database connection is ready\n    app.listen(3001, () => {\n        console.log(\"Listening on port 3001\")\n    });\n\n});"],"file":"server.js"}